---

- name: Placeholder Ansible Play
  hosts: control_plane
  become: true
  vars:
    static_ip: "192.168.1.100"
    k3s_token: "secret"
  gather_facts: false
  tasks:
    - name: check if k3s is installed
      shell: |
        # if path /usr/local/bin/k3s-uninstall.sh exists, then k3s is installed. run uninstall.sh
        if [ -f /usr/local/bin/k3s-uninstall.sh ]; then
          echo "k3s is installed"
          sudo /usr/local/bin/k3s-uninstall.sh
        else
          echo "k3s is not installed"
        fi
    - name: Install K3s on master
      when: inventory_hostname == 'k3s-server-1' 
      shell: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="server" sh -s - --token {{ k3s_token }} \
        --cluster-init \
        --disable=traefik \
        --tls-san={{ static_ip }} # Optional, needed if using a fixed registration address
    - name: install k3s on other control plane nodes
      when: inventory_hostname != 'k3s-server-1'
      shell: |
        # if path /usr/local/bin/k3s-uninstall.sh exists, then k3s is installed. run uninstall.sh
        if [ -f /usr/local/bin/k3s-uninstall.sh ]; then
          echo "k3s is installed"
          sudo /usr/local/bin/k3s-uninstall.sh
        else
          echo "k3s is not installed"
        fi
        curl -sfL https://get.k3s.io | K3S_TOKEN={{ k3s_token }} sh -s - server \
        --server https://{{ static_ip }}:6443 \
        --disable=traefik
    # register the server token /var/lib/rancher/k3s/server/node-token
    - name: register the server token
      shell: |
        sudo cat /var/lib/rancher/k3s/server/node-token
      register: server_token
    - name: set the server token
      set_fact:
        server_token: "{{ server_token.stdout }}"
- name: Install K3s on workers
  hosts: workers
  become: true
  serial: 5
  gather_facts: false
  tasks:
    # get the server token from previous play
    - name: Install K3s
      shell: |
        # if path /usr/local/bin/k3s-agent-uninstall.sh exists, then k3s agent is installed. run item
        if [ -f /usr/local/bin/k3s-agent-uninstall.sh ]; then
          echo "k3s agent is installed"
          sudo /usr/local/bin/k3s-agent-uninstall.sh
        fi
        
        echo "k3s agent is not installed"
        curl -sfL https://get.k3s.io | K3S_URL=https://192.168.1.100:6443 sh -s - agent --token "{{ hostvars['k3s-server-1'].server_token }}"
# - name: partition and mount disk
#   hosts: workers
#   become: true
#   tasks:
#     - name: partition disk
#       community.general.parted:
#         device: /dev/sdb
#         number: 1
#         state: present
#         part_type: primary
#         fs_type: ext4
#         part_start: 0%
#         part_end: 100%
#     - name: format partition
#       filesystem:
#         device: /dev/sdb1
#         fstype: ext4
#     - name: mount 
#       ansible.posix.mount:
#         path: /mnt
#         src: /dev/sdb1
#         fstype: ext4
#         state: present
#     - name: mount the disk now
#       command: mount -a

- name: set up kubernetes infrastructure
  hosts:  k3s-server-1
  become: true
  tasks:
    - name: Remove APT locks
      ansible.builtin.shell:
        cmd: |
          rm -f /var/lib/apt/lists/lock
          rm -f /var/cache/apt/archives/lock
          rm -f /var/lib/dpkg/lock*
    - name: install pip
      ansible.builtin.apt:
        name: python3-pip
        state: present
    - name: install helm on ubuntu k3s-server-1
      ansible.builtin.shell:
        cmd: |
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install apt-transport-https --yes
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install helm
    - name: install kubernetes python client
      pip:
        name: kubernetes
    - name: conver k3s kubeconfig to normal kuceconfig
      ansible.builtin.shell:
        cmd: |
          mkdir -p ~/.kube
          sudo cat /etc/rancher/k3s/k3s.yaml > ~/.kube/config
    - name: create argocd namespace
      kubernetes.core.k8s:
        state: present
        kind: Namespace
        name: argocd

    - name: install argocd
      kubernetes.core.k8s:
        state: present
        src: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        namespace: argocd 
   